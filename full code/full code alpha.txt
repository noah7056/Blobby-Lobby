// server.js
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);
const PORT = process.env.PORT || 3000;

app.use(express.static('public'));

const players = {};
const chatHistory = [];

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('newPlayer', (data) => {
    players[socket.id] = {
      x: Math.floor(Math.random() * 500),
      y: Math.floor(Math.random() * 500),
      color: data.color,
      username: data.username || 'Anonymous',
    };
    socket.emit('chatHistory', chatHistory);
  });

  socket.on('move', (dir) => {
    const speed = 3;
    if (players[socket.id]) {
      if (dir === 'left') players[socket.id].x -= speed;
      if (dir === 'right') players[socket.id].x += speed;
      if (dir === 'up') players[socket.id].y -= speed;
      if (dir === 'down') players[socket.id].y += speed;

      players[socket.id].x = Math.max(0, Math.min(players[socket.id].x, 780));
      players[socket.id].y = Math.max(0, Math.min(players[socket.id].y, 580));
    }
  });

  socket.on('chatMessage', (msg) => {
    let username = players[socket.id]?.username;
    if (!username) username = 'Anonymous';
    const message = { username, text: msg };
    chatHistory.push(message);
    if (chatHistory.length > 50) chatHistory.shift();
    io.emit('chatMessage', message);
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
    delete players[socket.id];
  });

  setInterval(() => {
    io.emit('state', players);
  }, 1000 / 60);
});

http.listen(PORT, '0.0.0.0', () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


// public/client.js
const socket = io();
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
let keys = {};
let playerColor = getRandomColor();
let username = '';

function getRandomColor() {
  const colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink', 'cyan'];
  return colors[Math.floor(Math.random() * colors.length)];
}

const form = document.getElementById('startForm');
form.addEventListener('submit', (e) => {
  e.preventDefault();
  username = document.getElementById('username').value;
  if (username) {
    socket.emit('newPlayer', { username, color: playerColor });
    form.style.display = 'none';
  }
});

window.addEventListener('keydown', (e) => keys[e.key] = true);
window.addEventListener('keyup', (e) => keys[e.key] = false);

function gameLoop() {
  if (keys['a']) socket.emit('move', 'left');
  if (keys['d']) socket.emit('move', 'right');
  if (keys['w']) socket.emit('move', 'up');
  if (keys['s']) socket.emit('move', 'down');
  requestAnimationFrame(gameLoop);
}
requestAnimationFrame(gameLoop);

socket.on('state', (players) => {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  for (let id in players) {
    const p = players[id];
    ctx.fillStyle = p.color;
    ctx.beginPath();
    ctx.arc(p.x, p.y, 20, 0, Math.PI * 2);
    ctx.fill();

    ctx.fillStyle = 'white';
    ctx.font = '14px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText(p.username || 'Anonymous', p.x, p.y - 30);
  }
});

// Chat logic
const chatForm = document.getElementById('chatForm');
const chatInput = document.getElementById('chatInput');
const messages = document.getElementById('messages');

chatForm.addEventListener('submit', (e) => {
  e.preventDefault();
  if (chatInput.value.trim()) {
    socket.emit('chatMessage', chatInput.value);
    chatInput.value = '';
  }
});

socket.on('chatMessage', (msg) => {
  const div = document.createElement('div');
  div.textContent = `${msg.username}: ${msg.text}`;
  messages.appendChild(div);
  messages.scrollTop = messages.scrollHeight;
});

socket.on('chatHistory', (history) => {
  messages.innerHTML = '';
  history.forEach((msg) => {
    const div = document.createElement('div');
    div.textContent = `${msg.username}: ${msg.text}`;
    messages.appendChild(div);
  });
  messages.scrollTop = messages.scrollHeight;
});

<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Blobby Game</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <h1>ðŸŒˆ Blobby Game ðŸŒˆ</h1>
  <form id="startForm">
    <input type="text" id="username" placeholder="Enter your name" required />
    <button type="submit">Join Game</button>
  </form>
  <canvas id="game" width="800" height="600"></canvas>
  <div id="chat">
    <div id="messages"></div>
    <form id="chatForm">
      <input type="text" id="chatInput" placeholder="Type a message..." />
      <button type="submit">Send</button>
    </form>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script src="client.js"></script>
</body>
</html>

/* public/style.css */
  body {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #0D1B2A;
  font-family: sans-serif;
  color: #E0E1DD;
}
canvas {
  border: 2px solid #778DA9;
  background: #1B263B;
  margin-top: 20px;
}
#startForm {
  margin-top: 20px;
}
input[type="text"] {
  padding: 8px;
  border-radius: 4px;
  border: none;
  margin-right: 8px;
  background-color: #E0E1DD;
  color: #0D1B2A;
}
button[type="submit"] {
  padding: 8px 16px;
  border-radius: 4px;
  border: none;
  background-color: #415A77;
  color: #E0E1DD;
  cursor: pointer;
  transition: background-color 0.2s;
}
button[type="submit"]:hover {
  background-color: #778DA9;
}
#chat {
  width: 800px;
  margin-top: 20px;
}
#messages {
  height: 150px;
  overflow-y: auto;
  background: #1B263B;
  border: 1px solid #415A77;
  padding: 10px;
  border-radius: 4px;
  margin-bottom: 10px;
  word-wrap: break-word;
  color: white;
}
#chatForm input[type="text"] {
  width: 70%;
  padding: 8px;
  border-radius: 4px;
  border: none;
  margin-right: 8px;
  background-color: #E0E1DD;
  color: #0D1B2A;
}
#chatForm button {
  padding: 8px 16px;
  border-radius: 4px;
  border: none;
  background-color: #415A77;
  color: #E0E1DD;
  cursor: pointer;
  transition: background-color 0.2s;
}
#chatForm button:hover {
  background-color: #778DA9;
}
